version: "3.4"

services:
  main:
    image: 'wpgraphql-cache'
    depends_on:
      - 'image-builder'
    # This option is used by 'run-docker-compose-up.sh' to copy coverage data out of the container onto the Docker host
    container_name: 'wp-graphql'
    environment:
      DB_SERVE_NAME: 'wpgraphql_test'
      DB_HOST: 'mysql_test'
      DB_USER: 'root'
      DB_PASSWORD: 'testing'
      WP_VERSION: "${WP_VERSION}"
      TEST_TYPE: "${TEST_TYPE}"
      COVERAGE: "${COVERAGE}"
    user: "${CONTAINER_USER_ID}"
    working_dir: '/project'
    volumes:
      - "${PWD}:/project:delegated"
    entrypoint:
      [ "sleep", "9999d" ]

  wpgraphql.test:
    image: 'wpgraphql-cache'
    depends_on:
      - 'image-builder'
    environment:
      WORDPRESS_DB_HOST: 'mysql_test'
      WORDPRESS_DB_NAME: 'wpgraphql_test'
      WORDPRESS_DB_USER: 'root'
      WORDPRESS_DB_PASSWORD: 'testing'

  # This configuration ensures the custom image is built exactly once before it's used
  image-builder:
    build:
      context: '../../.'
      dockerfile: 'Dockerfile.tests'
      target: 'tests-shell-environment'
      args:
        BASE_DOCKER_IMAGE: "wordpress:${WP_VERSION}-php${PHP_VERSION}-apache"
        CONTAINER_USER_ID: "${CONTAINER_USER_ID}"
        CONTAINER_GROUP_ID: "${CONTAINER_GROUP_ID}"
    # Setting the 'image' option to only rebuild Docker layers when necessary
    image: 'wpgraphql-cache'

  mysql_test:
    image: "${MYSQL_DOCKER_IMAGE}"
    environment:
      MYSQL_DATABASE: 'wpgraphql_test'
      MYSQL_ROOT_PASSWORD: 'testing'
