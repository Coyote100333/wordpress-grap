<?php
class PreviewContentNodesTest extends \Codeception\TestCase\WPTestCase {

	public $admin;
	public $with_post_type;
	public $without_post_type;

	public function setUp(): void {

		$this->admin = $this->factory()->user->create([
			'role' => 'administrator'
		]);

		$this->with_post_type = 'with-revisions';
		$this->without_post_type = 'without-revisions';


		register_post_type(
			$this->with_post_type,
			[
				'show_in_graphql' => true,
				'graphql_single_name' => 'WithRevisionSupport',
				'graphql_plural_name' => 'allWithRevisionSupport',
				'supports' => [ 'title', 'content', 'author' ],
				'public' => true,
			]
		);

		register_post_type( $this->without_post_type, [
			'show_in_graphql' => true,
			'graphql_single_name' => 'WithoutRevisionSupport',
			'graphql_plural_name' => 'allWithoutRevisionSupport',
			'supports' => [ 'title', 'content', 'author' ],
			'public' => true,
		]);

		wp_set_current_user( $this->admin );

		parent::setUp(); // TODO: Change the autogenerated stub
	}

	public function tearDown(): void {
		parent::tearDown(); // TODO: Change the autogenerated stub
	}

	/**
	 * Ensure the post types are queryable in the schema
	 */
	public function testValidSchema() {

		$actual = graphql([
			'query' => '{allWithoutRevisionSupport{nodes{id}}}'
		]);

		$this->assertArrayNotHasKey( 'errors', $actual );

		$actual = graphql([
			'query' => '{allWithRevisionSupport{nodes{id}}}'
		]);

		$this->assertArrayNotHasKey( 'errors', $actual );

	}

	public function getPreviewQuery() {

		return '
		query PreviewContentNode( $id:ID! $asPreview: Boolean) {
		  node: contentNode(id:$id idType:DATABASE_ID asPreview:$asPreview) {
		    __typename
		    id
		    databaseId
		    isPreview
		    status
		    ...on NodeWithTitle {
		      title
		    }
		  }
		}
		';

	}

	/**
	 * When a new post is created in WordPress, it doesn't
	 * have an ID yet until it is saved.
	 *
	 * If a user were to click preview
	 * - WordPress would check if the post_type supports revisions
	 * - If so: create a revision, return that revision as the preview
	 * - If not: create a draft, return the draft as the revision
	 */
	public function testPreviewNewPostOfTypeWithRevisionSupport() {

		// user creates a new post, nothing exists in the database yet
		// user clicks "preview"
		// the post_type supports revisions
		// a draft is created
		// a revision is also created
		$draft_title = uniqid( 'preview:', true );
		$draft_id = $this->factory()->post->create([
			'post_type' => $this->with_post_type,
			'post_status' => 'draft',
			'post_title' => $draft_title,
			'post_author' => $this->admin,
		]);

		$revision_id = $this->factory()->post->create([
			'post_type' => 'revision',
			'post_status' => 'inherit',
			'post_title' => $draft_title,
			'post_author' => $this->admin,
			'post_parent' => $draft_id,
		]);

		$preview = graphql([
			'query' => $this->getPreviewQuery(),
			'variables' => [
				'id' => $draft_id,
				'asPreview' => true,
			]
		]);

		$this->assertArrayNotHasKey( 'errors', $preview );

		// the revision id should be the id of the preview since the post_type supports revisions
		$this->assertSame( 'WithRevisionSupport', $preview['data']['node']['__typename'] );
		$this->assertSame( $revision_id, $preview['data']['node']['databaseId'] );
		$this->assertSame( $draft_title, $preview['data']['node']['title'] );

		codecept_debug( $preview );

		$not_preview = graphql([
			'query' => $this->getPreviewQuery(),
			'variables' => [
				'id' => $draft_id,
				'asPreview' => false,
			]
		]);

		codecept_debug( $not_preview );

		$this->assertArrayNotHasKey( 'errors', $preview );

		// the draft_id should be the id because we're not trying to preview the thing
		$this->assertSame( 'WithRevisionSupport', $not_preview['data']['node']['__typename'] );
		$this->assertSame( $draft_id, $not_preview['data']['node']['databaseId'] );
		$this->assertSame( $draft_title, $not_preview['data']['node']['title'] );

		// The preview and the not_preview nodes should not be the same. They're different entities.
		$this->assertNotSame( $preview['data']['node'], $not_preview['data']['node'] );

		// but the titles should be the same, because that's the change we're previewing
		$this->assertSame( $preview['data']['node']['title'], $not_preview['data']['node']['title'] );


	}

	public function testPreviewNewPostOfTypeWithoutRevisionSupport() {

		// user creates a new post, nothing exists in the database yet
		// user clicks "preview"
		// the post_type doesn't support revisions
		// a draft is created
		$draft_title = uniqid( 'preview:', true );
		$draft_id = $this->factory()->post->create([
			'post_type' => $this->without_post_type,
			'post_status' => 'draft',
			'post_title' => $draft_title,
			'post_author' => $this->admin,
		]);

		$preview = graphql([
			'query' => $this->getPreviewQuery(),
			'variables' => [
				'id' => $draft_id,
				'asPreview' => true,
			]
		]);

		$this->assertArrayNotHasKey( 'errors', $preview );
		$this->assertSame( 'WithoutRevisionSupport', $preview['data']['node']['__typename'] );
		$this->assertSame( $draft_id, $preview['data']['node']['databaseId'] );
		$this->assertSame( $draft_title, $preview['data']['node']['title'] );

		codecept_debug( $preview );

		$not_preview = graphql([
			'query' => $this->getPreviewQuery(),
			'variables' => [
				'id' => $draft_id,
				'asPreview' => false,
			]
		]);

		codecept_debug( $not_preview );

		$this->assertArrayNotHasKey( 'errors', $preview );
		$this->assertSame( 'WithoutRevisionSupport', $not_preview['data']['node']['__typename'] );
		$this->assertSame( $draft_id, $not_preview['data']['node']['databaseId'] );
		$this->assertSame( $draft_title, $not_preview['data']['node']['title'] );
		$this->assertSame( $preview['data']['node'], $not_preview['data']['node'] );

	}

	public function testPreviewDraftPostOfTypeWithRevisionSupport() {

		// draft post exists
		$draft_title = 'draft title test, yo';
		$draft_id = $this->factory()->post->create([
			'post_type' => $this->with_post_type,
			'post_status' => 'draft',
			'post_title' => $draft_title,
			'post_author' => $this->admin,
		]);

		// user clicks preview
		// since the post type supports revisions, a revision is created
		$revision_id = $this->factory()->post->create([
			'post_type' => 'revision',
			'post_status' => 'inherit',
			'post_title' => $draft_title,
			'post_author' => $this->admin,
			'post_parent' => $draft_id,
		]);

		$not_preview = graphql([
			'query' => $this->getPreviewQuery(),
			'variables' => [
				'id' => $draft_id,
				'asPreview' => false,
			]
		]);

		codecept_debug( $not_preview );

		$this->assertArrayNotHasKey( 'errors', $not_preview );
		$this->assertSame( 'WithRevisionSupport', $not_preview['data']['node']['__typename'] );
		$this->assertSame( $draft_id, $not_preview['data']['node']['databaseId'] );
		$this->assertSame( $draft_title, $not_preview['data']['node']['title'] );

		$preview = graphql([
			'query' => $this->getPreviewQuery(),
			'variables' => [
				'id' => $draft_id,
				'asPreview' => true,
			]
		]);

		codecept_debug( $preview );

		$this->assertArrayNotHasKey( 'errors', $not_preview );

		// The post type supports revisions, so the preview node should be
		// a different node than the draft itself
		$this->assertNotSame( $not_preview, $preview );
		$this->assertSame( 'WithRevisionSupport', $preview['data']['node']['__typename'] );
		$this->assertSame( $revision_id, $preview['data']['node']['databaseId'] );

		// But the titles (that we are previewing) should be the same
		$this->assertSame( $preview['data']['node']['title'], $not_preview['data']['node']['title'] );

	}

	public function testPreviewDraftPostOfTypeWithoutRevisionSupport() {

		// draft post exists
		$draft_title = 'draft title test, yo';
		$draft_id = $this->factory()->post->create([
			'post_type' => $this->without_post_type,
			'post_status' => 'draft',
			'post_title' => $draft_title,
			'post_author' => $this->admin,
		]);

		// user clicks preview
		// since the post type does not support revisions, a revision is not created

		$not_preview = graphql([
			'query' => $this->getPreviewQuery(),
			'variables' => [
				'id' => $draft_id,
				'asPreview' => false,
			]
		]);

		codecept_debug( $not_preview );

		$this->assertArrayNotHasKey( 'errors', $not_preview );
		$this->assertSame( 'WithoutRevisionSupport', $not_preview['data']['node']['__typename'] );
		$this->assertSame( $draft_id, $not_preview['data']['node']['databaseId'] );
		$this->assertSame( $draft_title, $not_preview['data']['node']['title'] );

		$preview = graphql([
			'query' => $this->getPreviewQuery(),
			'variables' => [
				'id' => $draft_id,
				'asPreview' => true,
			]
		]);

		codecept_debug( $preview );

		$this->assertArrayNotHasKey( 'errors', $not_preview );

		// The post type does not support revisions, so the preview node should be
		// the same node as the draft itself
		$this->assertSame( $not_preview, $preview );
		$this->assertSame( 'WithoutRevisionSupport', $preview['data']['node']['__typename'] );
		$this->assertSame( $draft_id, $preview['data']['node']['databaseId'] );

		// But the titles (that we are previewing) should be the same
		$this->assertSame( $preview['data']['node']['title'], $not_preview['data']['node']['title'] );

	}

	public function testPreviewPublishedPostOfTypeWithRevisionSupport() {

		// we're starting with a published post
		$title = 'published title';
		$published_id = $this->factory()->post->create([
			'post_type' => $this->with_post_type,
			'post_status' => 'publish',
			'post_title' => $title,
			'post_author' => $this->admin,
		]);

		// user changes title
		$new_title = 'new title';

		// User clicks preview
		// since the post type supports revisions a revision is created
		$revision_id = $this->factory()->post->create([
			'post_type' => 'revision',
			'post_status' => 'inherit',
			'post_title' => $new_title,
			'post_author' => $this->admin,
			'post_parent' => $published_id,
		]);

		$not_preview = graphql([
			'query' => $this->getPreviewQuery(),
			'variables' => [
				'id' => $published_id,
				'asPreview' => false,
			]
		]);

		codecept_debug( $not_preview );

		$this->assertArrayNotHasKey( 'errors', $not_preview );
		$this->assertSame( 'WithRevisionSupport', $not_preview['data']['node']['__typename'] );
		$this->assertSame( $published_id, $not_preview['data']['node']['databaseId'] );
		$this->assertSame( $title, $not_preview['data']['node']['title'] );

		$preview = graphql([
			'query' => $this->getPreviewQuery(),
			'variables' => [
				'id' => $published_id,
				'asPreview' => true,
			]
		]);

		codecept_debug( $preview );

		$this->assertArrayNotHasKey( 'errors', $not_preview );

		// The published node and preview node should be different nodes
		$this->assertNotSame( $preview, $not_preview );
		$this->assertSame( 'WithRevisionSupport', $preview['data']['node']['__typename'] );

		// The revision id should be returned
		$this->assertSame( $revision_id, $preview['data']['node']['databaseId'] );

		// the changed title should be returned for the preview
		$this->assertSame( $new_title, $preview['data']['node']['title'] );

	}

	public function testPreviewPublishedPostOfTypeWithoutRevisionSupport() {

		// we're starting with a published post
		$title = 'published title';
		$published_id = $this->factory()->post->create([
			'post_type' => $this->without_post_type,
			'post_status' => 'publish',
			'post_title' => $title,
			'post_author' => $this->admin,
		]);

		// user changes title
		$new_title = 'new title';

		// User clicks preview
		// since the post type supports revisions a revision is created
		$revision_id = $this->factory()->post->create([
			'post_type' => 'revision',
			'post_status' => 'inherit',
			'post_title' => $new_title,
			'post_author' => $this->admin,
			'post_parent' => $published_id,
		]);

		$not_preview = graphql([
			'query' => $this->getPreviewQuery(),
			'variables' => [
				'id' => $published_id,
				'asPreview' => false,
			]
		]);

		codecept_debug( $not_preview );

		$this->assertArrayNotHasKey( 'errors', $not_preview );
		$this->assertSame( 'WithoutRevisionSupport', $not_preview['data']['node']['__typename'] );
		$this->assertSame( $published_id, $not_preview['data']['node']['databaseId'] );
		$this->assertSame( $title, $not_preview['data']['node']['title'] );

		$preview = graphql([
			'query' => $this->getPreviewQuery(),
			'variables' => [
				'id' => $published_id,
				'asPreview' => true,
			]
		]);

		codecept_debug( $preview );

		$this->assertArrayNotHasKey( 'errors', $not_preview );

		// The published node and preview node should be different nodes
		$this->assertNotSame( $preview, $not_preview );
		$this->assertSame( 'WithoutRevisionSupport', $preview['data']['node']['__typename'] );

		// The revision id should be returned
		$this->assertSame( $revision_id, $preview['data']['node']['databaseId'] );

		// the changed title should be returned for the preview
		$this->assertSame( $new_title, $preview['data']['node']['title'] );

	}

}
