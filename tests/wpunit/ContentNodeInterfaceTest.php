<?php

class ContentNodeInterfaceTest extends \Codeception\TestCase\WPTestCase {

	public function setUp() {
		parent::setUp(); // TODO: Change the autogenerated stub
	}
	public function tearDown() {
		parent::tearDown(); // TODO: Change the autogenerated stub
	}

	public function testContentNodeExists() {
		$query = '
		{
		  __type(name: "ContentNode") {
		    name
		    kind
		  }
		}
		';
		$actual = graphql([ 'query' => $query ]);
		$this->assertArrayNotHasKey( 'errors', $actual );
		$this->assertEquals( 'ContentNode', $actual['data']['__type']['name'] );
		$this->assertEquals( 'INTERFACE', $actual['data']['__type']['kind'] );
	}

	public function testQueryContentNodesOfManyTypes() {

		$page_id = $this->factory()->post->create([
			'post_type' => 'page',
			'post_status' => 'publish',
			'post_title' => 'Test Page',
		]);

		$post_id = $this->factory()->post->create([
			'post_type' => 'post',
			'post_status' => 'publish',
			'post_title' => 'Test Post',
		]);

		$query = '
		{
		  contentNodes(first:2) {
		    nodes {
		      __typename
		      id
		      databaseId
		      title
		      ...on Post {
		        postId
		      }
		      ...on Page {
		        pageId
		      }
		    }
		  }
	    }
		';

		$actual = graphql([
			'query' => $query
		]);

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

		$this->assertEquals( 'Post', $actual['data']['contentNodes']['nodes'][0]['__typename'] );
		$this->assertEquals( $post_id, $actual['data']['contentNodes']['nodes'][0]['databaseId'] );
		$this->assertEquals( $post_id, $actual['data']['contentNodes']['nodes'][0]['postId'] );

		$this->assertEquals( 'Page', $actual['data']['contentNodes']['nodes'][1]['__typename'] );
		$this->assertEquals( $page_id, $actual['data']['contentNodes']['nodes'][1]['databaseId'] );
		$this->assertEquals( $page_id, $actual['data']['contentNodes']['nodes'][1]['pageId'] );
	}

}
