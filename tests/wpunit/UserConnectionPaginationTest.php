<?php

class UserConnectionPaginationTest extends \Codeception\TestCase\WPTestCase {

	public function setUp(): void {
		parent::setUp();
		WPGraphQL::clear_schema();
	}

	public function tearDown(): void {
		parent::tearDown(); // TODO: Change the autogenerated stub
	}

	public function createUser($args)
	{

		/**
		 * Set up the $defaults
		 */
		$defaults = [
			'post_author'   => $this->admin,
			'post_content'  => 'Test page content',
			'post_excerpt'  => 'Test excerpt',
			'post_status'   => 'publish',
			'post_title'    => 'Test Title',
			'post_type'     => 'post',
			'post_date'     => $this->current_date,
			'has_password'  => false,
			'post_password' => null,
		];

		/**
		 * Combine the defaults with the $args that were
		 * passed through
		 */
		$args = array_merge($defaults, $args);

		/**
		 * Create the page
		 */
		$post_id = $this->factory->post->create($args);

		/**
		 * Update the _edit_last and _edit_lock fields to simulate a user editing the page to
		 * test retrieving the fields
		 *
		 * @since 0.0.5
		 */
		update_post_meta($post_id, '_edit_lock', $this->current_time . ':' . $this->admin);
		update_post_meta($post_id, '_edit_last', $this->admin);

		/**
		 * Return the $id of the post_object that was created
		 */
		return $post_id;
	}

	/**
	 * Creates several users for use in cursor query tests
	 *
	 * @param  int $count Number of posts to create.
	 *
	 * @return array
	 */
	public function create_users($count = 20)
	{

		// Create users
		$created_users = [];
		for ($i = 1; $i <= $count; $i ++) {
			$created_users[] = $this->factory()->user->create([
				'role' => 'editor',
			]);
		}

		return $created_users;
	}

	public function testPaginateForwardAndBackward() {

		$users = $this->create_users( 20 );

		$query = '
		query getUsers($first: Int, $after: String, $last: Int, $before: String) {
		  users(first: $first, last: $last, before: $before, after: $after) {
		    pageInfo {
		      endCursor
		      startCursor
		      hasPreviousPage
		      hasNextPage
		    }
		    nodes {
		      databaseId
		      id
		    }
		  }
		}
		';

		codecept_debug( $users );

		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => null,
				'last'   => null,
				'before' => null,
			]
		] );

		codecept_debug( $actual );
		return;

		$this->assertArrayNotHasKey( 'errors', $actual );

		$latest_ids_first = array_reverse( $users );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Assert the first item is the most recent post
		$this->assertSame( $latest_ids_first[0], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 2nd most recent post
		$this->assertSame( $latest_ids_first[1], $actual['data']['users']['nodes'][1]['databaseId'] );

		// Query the next page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => $actual['data']['posts']['pageInfo']['endCursor'],
				'last'   => null,
				'before' => null,
			]
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Assert the first item is the 3rd most recent post
		$this->assertSame( $latest_ids_first[2], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent post
		$this->assertSame( $latest_ids_first[3], $actual['data']['users']['nodes'][1]['databaseId'] );

		// Query the next page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => $actual['data']['posts']['pageInfo']['endCursor'],
				'last'   => null,
				'before' => null,
			]
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Assert the first item is the 5th most recent post
		$this->assertSame( $latest_ids_first[4], $actual['data']['posts']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 6th most recent post
		$this->assertSame( $latest_ids_first[5], $actual['data']['posts']['nodes'][1]['databaseId'] );

		// Query the previous page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => null,
				'after'  => null,
				'last'   => 2,
				'before' => $actual['data']['posts']['pageInfo']['startCursor'],
			]
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['posts']['nodes'] );

		// Assert the first item is the 3rd most recent post
		$this->assertSame( $latest_ids_first[2], $actual['data']['posts']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent post
		$this->assertSame( $latest_ids_first[3], $actual['data']['posts']['nodes'][1]['databaseId'] );

		// Query the previous page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => null,
				'after'  => null,
				'last'   => 2,
				'before' => $actual['data']['posts']['pageInfo']['startCursor'],
			]
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['posts']['nodes'] );

		// Assert the first item is the 3rd most recent post
		$this->assertSame( $latest_ids_first[0], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent post
		$this->assertSame( $latest_ids_first[1], $actual['data']['users']['nodes'][1]['databaseId'] );
	}
}
