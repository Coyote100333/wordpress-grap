<?php

class UserConnectionPaginationTest extends \Tests\WPGraphQL\TestCase\WPGraphQLTestCase {

	public $user_ids;
	public $admin;

	public function setUp(): void {
		parent::setUp();
		$this->delete_users();
		$this->admin    = $this->factory()->user->create( [ 'role' => 'administrator' ] );
		$this->user_ids = $this->create_users( 20 );
		WPGraphQL::clear_schema();
	}

	/**
	 * Deletes all users that were created using create_users()
	 */
	public function delete_users() {
		global $wpdb;
		$wpdb->query( $wpdb->prepare(
			"DELETE FROM {$wpdb->prefix}users WHERE ID <> %d",
			array( 0 )
		) );
		$this->created_user_ids = [ 1 ];
	}

	public function tearDown(): void {
		$this->delete_users();
		parent::tearDown(); // TODO: Change the autogenerated stub
	}

	/**
	 * Creates several users for use in cursor query tests
	 *
	 * @param   int $count Number of users to create.
	 *
	 * @return array
	 */
	public function create_users( $count = 20 ) {

		// Create users
		$created_users = [];
		for ( $i = 1; $i <= $count; $i ++ ) {
			$created_users[] = $this->factory()->user->create([
				'role' => 'editor',
			]);
		}

		return $created_users;
	}

	public function testPaginateForwardAndBackward() {
		wp_set_current_user( $this->admin );

		$users    = new WP_User_Query([
			'number' => 100,
			'fields' => 'ids',
		]);
		$user_ids = $users->get_results();

		$query = '
		query getUsers($first: Int, $after: String, $last: Int, $before: String) {
			users(first: $first, last: $last, before: $before, after: $after) {
				pageInfo {
					endCursor
					startCursor
					hasPreviousPage
					hasNextPage
				}
				nodes {
					databaseId
					id
				}
			}
		}
		';

		$variables = [
			'first'  => 2,
			'after'  => null,
			'last'   => null,
			'before' => null,
		];

		$actual = $this->graphql( compact( 'query', 'variables' ) );

		$this->assertArrayNotHasKey( 'errors', $actual );


		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Assert the first item is the most recent user
		$this->assertEquals( $user_ids[0], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 2nd most recent user
		$this->assertEquals( $user_ids[1], $actual['data']['users']['nodes'][1]['databaseId'] );

		// Query with empty `after`
		$variables['after'] = '';
		$actual             = $this->graphql( compact( 'query', 'variables' ) );
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Query the next page
		$variables['after'] = $actual['data']['users']['pageInfo']['endCursor'];
		$actual             = $this->graphql( compact( 'query', 'variables' ) );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Assert the first item is the 3rd most recent user
		$this->assertEquals( $user_ids[2], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent user
		$this->assertEquals( $user_ids[3], $actual['data']['users']['nodes'][1]['databaseId'] );

		// Query the next page
		$variables['after'] = $actual['data']['users']['pageInfo']['endCursor'];
		$actual             = $this->graphql( compact( 'query', 'variables' ) );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Assert the first item is the 5th most recent user
		$this->assertEquals( $user_ids[4], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 6th most recent user
		$this->assertEquals( $user_ids[5], $actual['data']['users']['nodes'][1]['databaseId'] );

		// Query the previous page
		$variables = [
			'first'  => null,
			'after'  => null,
			'last'   => 2,
			'before' => $actual['data']['users']['pageInfo']['startCursor'],
		];
		$actual    = $this->graphql( compact( 'query', 'variables' ) );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Assert the first item is the 3rd most recent user
		$this->assertEquals( $user_ids[2], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent user
		$this->assertEquals( $user_ids[3], $actual['data']['users']['nodes'][1]['databaseId'] );

		// Query the previous page
		$variables['before'] = $actual['data']['users']['pageInfo']['startCursor'];
		$actual              = $this->graphql( compact( 'query', 'variables' ) );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Assert the first item is the 3rd most recent user
		$this->assertEquals( $user_ids[0], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent user
		$this->assertEquals( $user_ids[1], $actual['data']['users']['nodes'][1]['databaseId'] );

		// Query last two users
		$variables['before'] = null;
		$actual              = $this->graphql( compact( 'query', 'variables' ) );
		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// reverse ids since we're going backwards.
		$user_ids = array_reverse( $user_ids );
		// Assert the first item is the 2nd most recent user
		$this->assertEquals( $user_ids[0], $actual['data']['users']['nodes'][1]['databaseId'] );

		// Assert the 2nd item is the  most recent user
		$this->assertEquals( $user_ids[1], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Query when before is empty
		$variables['before'] = '';
		$actual              = $this->graphql( compact( 'query', 'variables' ) );
		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );
	}

	public function testPaginateForwardAndBackwardOrderedByLogin() {

		$user_query = new WP_User_Query([
			'number'  => 20,
			'orderby' => 'login',
			'order'   => 'DESC',
			'fields'  => 'ids',
		]);

		$users = $user_query->get_results();

		$users = array_map( function ( $user ) {
			return absint( $user );
		}, $users );

		codecept_debug( $users );

		wp_set_current_user( $this->admin );

		$query = '
		query getUsers($first: Int, $after: String, $last: Int, $before: String $where:RootQueryToUserConnectionWhereArgs) {
			users(first: $first, last: $last, before: $before, after: $after where: $where) {
				pageInfo {
					endCursor
					startCursor
					hasPreviousPage
					hasNextPage
				}
				nodes {
					databaseId
					id
				}
			}
		}
		';

		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => null,
				'last'   => null,
				'before' => null,
				'where'  => [
					'orderby' => [
						[
							'field' => 'LOGIN',
							'order' => 'DESC',
						],
					],
				],
			],
		] );

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Assert the first item is the most recent user
		$this->assertSame( $users[0], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 2nd most recent user
		$this->assertSame( $users[1], $actual['data']['users']['nodes'][1]['databaseId'] );

		// Query the next page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => $actual['data']['users']['pageInfo']['endCursor'],
				'last'   => null,
				'before' => null,
				'where'  => [
					'orderby' => [
						[
							'field' => 'LOGIN',
							'order' => 'DESC',
						],
					],
				],
			],
		] );

		codecept_debug( [ $users, $actual, base64_decode( $actual['data']['users']['pageInfo']['endCursor'] ) ] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Assert the first item is the 3rd most recent user
		$this->assertSame( $users[2], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent user
		$this->assertSame( $users[3], $actual['data']['users']['nodes'][1]['databaseId'] );

		// Query the next page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => $actual['data']['users']['pageInfo']['endCursor'],
				'last'   => null,
				'before' => null,
				'where'  => [
					'orderby' => [
						[
							'field' => 'LOGIN',
							'order' => 'DESC',
						],
					],
				],
			],
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Assert the first item is the 5th most recent user
		$this->assertSame( $users[4], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 6th most recent user
		$this->assertSame( $users[5], $actual['data']['users']['nodes'][1]['databaseId'] );

		// Query the previous page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => null,
				'after'  => null,
				'last'   => 2,
				'before' => $actual['data']['users']['pageInfo']['startCursor'],
				'where'  => [
					'orderby' => [
						[
							'field' => 'LOGIN',
							'order' => 'DESC',
						],
					],
				],
			],
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Assert the first item is the 3rd most recent user
		$this->assertSame( $users[2], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent user
		$this->assertSame( $users[3], $actual['data']['users']['nodes'][1]['databaseId'] );

		// Query the previous page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => null,
				'after'  => null,
				'last'   => 2,
				'before' => $actual['data']['users']['pageInfo']['startCursor'],
				'where'  => [
					'orderby' => [
						[
							'field' => 'LOGIN',
							'order' => 'DESC',
						],
					],
				],
			],
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Assert the first item is the 3rd most recent user
		$this->assertSame( $users[0], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent user
		$this->assertSame( $users[1], $actual['data']['users']['nodes'][1]['databaseId'] );
	}

	public function testPaginateForwardAndBackwardOrderedByEmail() {

		$user_query = new WP_User_Query([
			'number'  => 20,
			'orderby' => 'email',
			'order'   => 'DESC',
			'fields'  => 'ids',
		]);

		$users = $user_query->get_results();

		$users = array_map( function ( $user ) {
			return absint( $user );
		}, $users );

		codecept_debug( $users );

		wp_set_current_user( $this->admin );

		$query = '
		query getUsers($first: Int, $after: String, $last: Int, $before: String $where:RootQueryToUserConnectionWhereArgs) {
			users(first: $first, last: $last, before: $before, after: $after where: $where) {
				pageInfo {
					endCursor
					startCursor
					hasPreviousPage
					hasNextPage
				}
				nodes {
					databaseId
					id
				}
			}
		}
		';

		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => null,
				'last'   => null,
				'before' => null,
				'where'  => [
					'orderby' => [
						[
							'field' => 'EMAIL',
							'order' => 'DESC',
						],
					],
				],
			],
		] );

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Assert the first item is the most recent user
		$this->assertSame( $users[0], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 2nd most recent user
		$this->assertSame( $users[1], $actual['data']['users']['nodes'][1]['databaseId'] );

		// Query the next page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => $actual['data']['users']['pageInfo']['endCursor'],
				'last'   => null,
				'before' => null,
				'where'  => [
					'orderby' => [
						[
							'field' => 'EMAIL',
							'order' => 'DESC',
						],
					],
				],
			],
		] );

		codecept_debug( [ $users, $actual, base64_decode( $actual['data']['users']['pageInfo']['endCursor'] ) ] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Assert the first item is the 3rd most recent user
		$this->assertSame( $users[2], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent user
		$this->assertSame( $users[3], $actual['data']['users']['nodes'][1]['databaseId'] );

		// Query the next page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => $actual['data']['users']['pageInfo']['endCursor'],
				'last'   => null,
				'before' => null,
				'where'  => [
					'orderby' => [
						[
							'field' => 'EMAIL',
							'order' => 'DESC',
						],
					],
				],
			],
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Assert the first item is the 5th most recent user
		$this->assertSame( $users[4], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 6th most recent user
		$this->assertSame( $users[5], $actual['data']['users']['nodes'][1]['databaseId'] );

		// Query the previous page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => null,
				'after'  => null,
				'last'   => 2,
				'before' => $actual['data']['users']['pageInfo']['startCursor'],
				'where'  => [
					'orderby' => [
						[
							'field' => 'EMAIL',
							'order' => 'DESC',
						],
					],
				],
			],
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Assert the first item is the 3rd most recent user
		$this->assertSame( $users[2], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent user
		$this->assertSame( $users[3], $actual['data']['users']['nodes'][1]['databaseId'] );

		// Query the previous page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => null,
				'after'  => null,
				'last'   => 2,
				'before' => $actual['data']['users']['pageInfo']['startCursor'],
				'where'  => [
					'orderby' => [
						[
							'field' => 'EMAIL',
							'order' => 'DESC',
						],
					],
				],
			],
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Assert the first item is the 3rd most recent user
		$this->assertSame( $users[0], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent user
		$this->assertSame( $users[1], $actual['data']['users']['nodes'][1]['databaseId'] );
	}

	public function testPaginateForwardAndBackwardOrderedByEmailAscending() {

		$user_query = new WP_User_Query([
			'number'  => 20,
			'orderby' => 'email',
			'order'   => 'ASC',
			'fields'  => 'ids',
		]);

		$users = $user_query->get_results();

		$users = array_map( function ( $user ) {
			return absint( $user );
		}, $users );

		codecept_debug( $users );

		wp_set_current_user( $this->admin );

		$query = '
		query getUsers($first: Int, $after: String, $last: Int, $before: String $where:RootQueryToUserConnectionWhereArgs) {
			users(first: $first, last: $last, before: $before, after: $after where: $where) {
				pageInfo {
					endCursor
					startCursor
					hasPreviousPage
					hasNextPage
				}
				nodes {
					databaseId
					id
				}
			}
		}
		';

		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => null,
				'last'   => null,
				'before' => null,
				'where'  => [
					'orderby' => [
						[
							'field' => 'EMAIL',
							'order' => 'ASC',
						],
					],
				],
			],
		] );

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Assert the first item is the most recent user
		$this->assertSame( $users[0], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 2nd most recent user
		$this->assertSame( $users[1], $actual['data']['users']['nodes'][1]['databaseId'] );

		// Query the next page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => $actual['data']['users']['pageInfo']['endCursor'],
				'last'   => null,
				'before' => null,
				'where'  => [
					'orderby' => [
						[
							'field' => 'EMAIL',
							'order' => 'ASC',
						],
					],
				],
			],
		] );

		codecept_debug( [ $users, $actual, base64_decode( $actual['data']['users']['pageInfo']['endCursor'] ) ] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Assert the first item is the 3rd most recent user
		$this->assertSame( $users[2], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent user
		$this->assertSame( $users[3], $actual['data']['users']['nodes'][1]['databaseId'] );

		// Query the next page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => 2,
				'after'  => $actual['data']['users']['pageInfo']['endCursor'],
				'last'   => null,
				'before' => null,
				'where'  => [
					'orderby' => [
						[
							'field' => 'EMAIL',
							'order' => 'ASC',
						],
					],
				],
			],
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Assert the first item is the 5th most recent user
		$this->assertSame( $users[4], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 6th most recent user
		$this->assertSame( $users[5], $actual['data']['users']['nodes'][1]['databaseId'] );

		// Query the previous page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => null,
				'after'  => null,
				'last'   => 2,
				'before' => $actual['data']['users']['pageInfo']['startCursor'],
				'where'  => [
					'orderby' => [
						[
							'field' => 'EMAIL',
							'order' => 'ASC',
						],
					],
				],
			],
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Assert the first item is the 3rd most recent user
		$this->assertSame( $users[2], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent user
		$this->assertSame( $users[3], $actual['data']['users']['nodes'][1]['databaseId'] );

		// Query the previous page
		$actual = graphql( [
			'query'     => $query,
			'variables' => [
				'first'  => null,
				'after'  => null,
				'last'   => 2,
				'before' => $actual['data']['users']['pageInfo']['startCursor'],
				'where'  => [
					'orderby' => [
						[
							'field' => 'EMAIL',
							'order' => 'ASC',
						],
					],
				],
			],
		] );

		// assert there are 2 items in the query
		$this->assertCount( 2, $actual['data']['users']['nodes'] );

		// Assert the first item is the 3rd most recent user
		$this->assertSame( $users[0], $actual['data']['users']['nodes'][0]['databaseId'] );

		// Assert the 2nd item is the 4th most recent user
		$this->assertSame( $users[1], $actual['data']['users']['nodes'][1]['databaseId'] );
	}
}
